Notes:
console.dir allows HTML element to be displayed as an object with an interactive list
    console.dir(object);
    vs console.log which displays element's HTML
    console.log(object) | console.log("string", object);

can use console.dir(window.document.querySelector(object)); to pull up interactive list
    since we are opening index.html in browser, writing window is unneeded since
    it is a global object

ex used in lesson:
    console.dir(window.document);

user behavior is called an event (in this case the click)
observation of that event is called the event listener
response to that event is called the event handler

console.log(buttonEl);
    convention: the El indicates this is a DOM element

//////////////////////////////////////////////////////////////
//////////                  timer function:                  //////////
//////////////////////////////////////////////////////////////
var counter = 10
var countdown = function () {
    console.log(counter);
    counter--;
    if (counter === 0){
        console.log("blastoff");
        clearInterval(startCountdown);
    };
};

var startCountdown = setInterval(countdown, 1000);

//////////////////////////////////////////////////////////////
//////////                 setTimeout fxn                   //////////
//////////////////////////////////////////////////////////////
var sayHello = function() {
    console.log("Hello there");
};

var timedGreeting = setTimeout(sayHello, 2000);

clearTimeout(timedGreeting);

<--
why would you want to do clearTimeout? in some cases you might not want the callback
function in setTimeout to occur. this prevents the callback function from occuring.

without this, sayHello will execute after 2 seconds.
-->

what's special about "submit" vs "click" is "submit" listens for two conditions:
1) user clicks button element with type="submit" attribute
2) user presses enter on keyboard

when we use javascript to listen for an event that occurs on an HTML element, browser
    collects all that information and packagest it into a JS object that can be used
    aka Event Interface
this object can be used, aka Event Object, by making the function that's executed by 
    the event have an argument to represent the event object
    the browser can then fill in the data for that event and pass argument into the function